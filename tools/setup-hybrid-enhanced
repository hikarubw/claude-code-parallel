#!/bin/bash
# Enhanced Hybrid Setup - Initialize the enhanced hybrid architecture with health monitoring
# One command to set up Pueue + Tmux + Health Monitoring + Auto-recovery

set -e

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Configuration
NUM_WORKERS=${1:-4}
SESSION="claude-workers"
MONITOR_SESSION="claude-monitor"
USE_ENHANCED=${USE_ENHANCED:-true}

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${CYAN}=== Enhanced Hybrid Architecture Setup ===${NC}"
echo "Setting up Pueue + Tmux with health monitoring and auto-recovery..."
echo ""

# Step 1: Check dependencies
echo -e "${BLUE}Step 1: Checking dependencies...${NC}"

check_command() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "${RED}Error: $1 is not installed${NC}"
        return 1
    fi
    echo -e "${GREEN}✓ $1 is installed${NC}"
    return 0
}

all_deps_ok=true
check_command "pueue" || all_deps_ok=false
check_command "pueued" || all_deps_ok=false
check_command "tmux" || all_deps_ok=false
check_command "jq" || all_deps_ok=false
check_command "gh" || all_deps_ok=false

if [ "$all_deps_ok" = false ]; then
    echo ""
    echo -e "${YELLOW}Please install missing dependencies:${NC}"
    echo "  brew install pueue tmux jq gh"
    exit 1
fi

# Step 2: Start Pueue daemon
echo ""
echo -e "${BLUE}Step 2: Starting Pueue daemon...${NC}"

if pueue status &>/dev/null; then
    echo -e "${GREEN}✓ Pueue daemon already running${NC}"
else
    echo "Starting Pueue daemon..."
    pueued -d
    sleep 2
    
    if pueue status &>/dev/null; then
        echo -e "${GREEN}✓ Pueue daemon started${NC}"
    else
        echo -e "${RED}Failed to start Pueue daemon${NC}"
        exit 1
    fi
fi

# Step 3: Initialize Pueue group
echo ""
echo -e "${BLUE}Step 3: Initializing Pueue configuration...${NC}"

"$SCRIPT_DIR/queue-pueue" init
echo -e "${GREEN}✓ Pueue group 'subissues' configured${NC}"

# Step 4: Create/attach to tmux session
echo ""
echo -e "${BLUE}Step 4: Setting up tmux session...${NC}"

if tmux has-session -t "$SESSION" 2>/dev/null; then
    echo -e "${YELLOW}Tmux session '$SESSION' already exists${NC}"
    echo -n "Kill existing session and recreate? (y/N): "
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        tmux kill-session -t "$SESSION"
        sleep 1
    else
        echo "Using existing session..."
    fi
fi

if ! tmux has-session -t "$SESSION" 2>/dev/null; then
    # Create new session with first worker
    tmux new-session -d -s "$SESSION" -n "workers"
    echo -e "${GREEN}✓ Created tmux session: $SESSION${NC}"
    
    # Create additional panes for more workers
    for ((i=2; i<=NUM_WORKERS; i++)); do
        tmux split-window -t "$SESSION:0" -v
        tmux select-layout -t "$SESSION:0" tiled
    done
    
    echo -e "${GREEN}✓ Created $NUM_WORKERS worker panes${NC}"
fi

# Step 5: Initialize health monitoring
echo ""
echo -e "${BLUE}Step 5: Initializing health monitoring...${NC}"

# Reset health metrics for fresh start
"$SCRIPT_DIR/worker-health-monitor" reset
echo -e "${GREEN}✓ Health monitoring initialized${NC}"

# Step 6: Start worker manager
echo ""
echo -e "${BLUE}Step 6: Starting worker manager...${NC}"

"$SCRIPT_DIR/worker-manager" start
echo -e "${GREEN}✓ Worker manager started${NC}"

# Step 7: Start workers
echo ""
echo -e "${BLUE}Step 7: Starting enhanced workers...${NC}"

# Determine which worker script to use
WORKER_SCRIPT="hybrid-worker"
if [ "$USE_ENHANCED" = "true" ] && [ -x "$SCRIPT_DIR/hybrid-worker-enhanced" ]; then
    WORKER_SCRIPT="hybrid-worker-enhanced"
    echo -e "${CYAN}Using enhanced workers with error recovery${NC}"
fi

# Start each worker
for ((i=1; i<=NUM_WORKERS; i++)); do
    pane_index=$((i-1))
    tmux send-keys -t "$SESSION:0.$pane_index" "$SCRIPT_DIR/$WORKER_SCRIPT $i" Enter
    echo -e "${GREEN}✓ Started worker $i${NC}"
    sleep 0.5
done

# Step 8: Migrate existing queue
echo ""
echo -e "${BLUE}Step 8: Checking for existing queue items...${NC}"

if [ -f "$HOME/.claude/workers/queue.txt" ] && [ -s "$HOME/.claude/workers/queue.txt" ]; then
    echo "Found existing queue items, migrating to Pueue..."
    "$SCRIPT_DIR/queue-pueue" migrate
else
    echo "No existing queue items found"
fi

# Step 9: Show status
echo ""
echo -e "${CYAN}=== Enhanced Hybrid Setup Complete! ===${NC}"
echo ""
echo -e "${GREEN}What's running:${NC}"
echo "• Pueue daemon: Managing task queue"
echo "• Tmux session: $SESSION with $NUM_WORKERS enhanced workers"
echo "• Worker manager: Monitoring health and auto-restarting failed workers"
echo "• Health monitoring: Tracking worker performance and metrics"
echo ""
echo -e "${GREEN}Available commands:${NC}"
echo "• View workers:        tmux attach -t $SESSION"
echo "• Worker health:       $SCRIPT_DIR/worker-health-monitor dashboard"
echo "• Manager status:      $SCRIPT_DIR/worker-manager status"
echo "• Queue status:        $SCRIPT_DIR/queue-pueue monitor"
echo "• Add task:           $SCRIPT_DIR/queue-pueue add <priority> <parent> <subissue>"
echo "• Scale workers:      $SCRIPT_DIR/worker-manager scale <number>"
echo ""
echo -e "${GREEN}Enhanced features:${NC}"
echo "• Automatic worker restart on failure"
echo "• Health monitoring and metrics"
echo "• Error recovery with retry logic"
echo "• Performance tracking per worker"
echo "• Graceful handling of git/worktree errors"
echo ""
echo -e "${YELLOW}Tips:${NC}"
echo "• Workers will automatically restart if they crash"
echo "• Check worker health with: worker-manager status"
echo "• View detailed metrics with: worker-health-monitor report"
echo "• Manager logs are at: ~/.claude/workers/manager.log"
echo ""

# Optional: Open monitoring dashboard
echo -n "Open health monitoring dashboard? (y/N): "
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    tmux new-window -t "$SESSION" -n "health" "$SCRIPT_DIR/worker-health-monitor dashboard"
    echo -e "${GREEN}Health dashboard opened in new tmux window${NC}"
fi