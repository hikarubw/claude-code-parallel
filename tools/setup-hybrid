#!/bin/bash
# Setup hybrid Pueue + Tmux architecture
# Revolutionary approach combining the best of both worlds!

set -e

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Default configuration
DEFAULT_WORKERS=4
SESSION="claude-workers"
PUEUE_GROUP="subissues"

echo -e "${BLUE}=== Claude Code Tools Hybrid Architecture Setup ===${NC}"
echo "This implements the hybrid Pueue + Tmux approach from ADR-003"
echo ""

# Show usage for specific commands
case "${1:-}" in
    help|--help|-h)
        cat << EOF
Usage: setup-hybrid [workers] [demo]

Examples:
  setup-hybrid        # Setup with 4 workers
  setup-hybrid 8      # Setup with 8 workers
  setup-hybrid demo   # Setup with demo data
  setup-hybrid clean  # Clean everything

This script sets up the revolutionary hybrid architecture:
- Pueue for professional queue management
- Tmux for Claude visibility
- Auto-approval continues to work
- Best of both worlds!
EOF
        exit 0
        ;;
    
    clean)
        echo "Cleaning hybrid setup..."
        tmux kill-session -t "$SESSION" 2>/dev/null || true
        pueue clean --group "$PUEUE_GROUP" 2>/dev/null || true
        pueue reset --force 2>/dev/null || true
        echo -e "${GREEN}✓ Cleanup complete${NC}"
        exit 0
        ;;
esac

# Check dependencies
check_dependencies() {
    echo "Checking dependencies..."
    local missing=0
    
    # Check tmux
    if command -v tmux >/dev/null 2>&1; then
        echo -e "${GREEN}✓ tmux found: $(tmux -V)${NC}"
    else
        echo -e "${RED}✗ tmux not found${NC}"
        ((missing++))
    fi
    
    # Check pueue
    if command -v pueue >/dev/null 2>&1; then
        echo -e "${GREEN}✓ pueue found: $(pueue --version | head -1)${NC}"
    else
        echo -e "${RED}✗ pueue not found${NC}"
        echo "Install with: brew install pueue"
        ((missing++))
    fi
    
    # Check jq
    if command -v jq >/dev/null 2>&1; then
        echo -e "${GREEN}✓ jq found: $(jq --version)${NC}"
    else
        echo -e "${RED}✗ jq not found${NC}"
        echo "Install with: brew install jq"
        ((missing++))
    fi
    
    # Check git
    if command -v git >/dev/null 2>&1; then
        echo -e "${GREEN}✓ git found: $(git --version)${NC}"
    else
        echo -e "${RED}✗ git not found${NC}"
        ((missing++))
    fi
    
    # Check if we're in a git repository
    if git rev-parse --git-dir > /dev/null 2>&1; then
        local repo_name=$(basename $(git rev-parse --show-toplevel))
        echo -e "${GREEN}✓ In git repository: $repo_name${NC}"
    else
        echo -e "${RED}✗ Not in a git repository${NC}"
        ((missing++))
    fi
    
    if [ $missing -gt 0 ]; then
        echo -e "${RED}Missing $missing dependencies. Please install them first.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✓ All dependencies satisfied${NC}"
}

# Start pueue daemon
start_pueue() {
    echo "Starting Pueue daemon..."
    
    if pueue status &>/dev/null; then
        echo -e "${GREEN}✓ Pueue daemon already running${NC}"
    else
        pueued -d
        sleep 1
        if pueue status &>/dev/null; then
            echo -e "${GREEN}✓ Pueue daemon started${NC}"
        else
            echo -e "${RED}✗ Failed to start Pueue daemon${NC}"
            exit 1
        fi
    fi
    
    # Initialize subissues group
    "$SCRIPT_DIR/queue-pueue" init
}

# Create hybrid worker session
create_worker_session() {
    local workers=${1:-4}
    
    echo -e "${BLUE}Creating hybrid worker session with $workers workers...${NC}"
    
    # Kill existing session if exists
    tmux kill-session -t "$SESSION" 2>/dev/null || true
    
    # Create new session with initial window
    tmux new-session -d -s "$SESSION" -n workers
    
    # Create all panes first (monitor + workers)
    for ((i=1; i<=workers; i++)); do
        tmux split-window -t "$SESSION:workers"
    done
    
    # Balance layout
    tmux select-layout -t "$SESSION:workers" tiled
    
    # Now send commands to each pane (panes are numbered starting at 1)
    tmux send-keys -t "$SESSION:workers.1" "$SCRIPT_DIR/worker-monitor" C-m
    
    # Start workers in remaining panes
    for ((i=1; i<=workers; i++)); do
        tmux send-keys -t "$SESSION:workers.$((i+1))" "$SCRIPT_DIR/hybrid-worker $i" C-m
    done
    
    # Final layout adjustment
    tmux select-layout -t "$SESSION:workers" tiled
    
    echo -e "${GREEN}✓ Hybrid worker session created${NC}"
}

# Setup auto-approval
setup_auto_approval() {
    echo "Configuring auto-approval..."
    
    if pgrep -f "auto-approve" > /dev/null; then
        echo -e "${GREEN}✓ Auto-approval already running${NC}"
    else
        echo "Start auto-approval with: ./tools/auto-approve start &"
        echo -e "${YELLOW}Note: Auto-approval works with hybrid architecture${NC}"
    fi
}

# Create demo subissues
create_demo() {
    echo -e "${BLUE}Creating demo subissues...${NC}"
    
    # Add some test subissues
    "$SCRIPT_DIR/queue-pueue" add 1 "123" "301"
    "$SCRIPT_DIR/queue-pueue" add 2 "123" "302"
    "$SCRIPT_DIR/queue-pueue" add 3 "124" "303"
    
    echo -e "${GREEN}✓ Demo subissues added${NC}"
}

# Show usage
show_usage() {
    cat << EOF
${BLUE}Hybrid Architecture Quick Start:${NC}

1. View worker session:
   tmux attach -t $SESSION

2. Add subissues:
   ./tools/queue-pueue add <priority> <parent> <subissue>

3. Monitor status:
   ./tools/worker-monitor

4. View Pueue status:
   pueue status --group $PUEUE_GROUP

5. Pause/resume processing:
   pueue pause --group $PUEUE_GROUP
   pueue start --group $PUEUE_GROUP

${YELLOW}Key Benefits:${NC}
- Pueue provides persistence and crash recovery
- Claude remains visible in tmux panes
- Auto-approval continues to work
- Advanced scheduling and dependencies available

${GREEN}The best of both worlds!${NC}
EOF
}

# Main setup flow
main() {
    local workers=${1:-4}
    local demo=${2:-false}
    
    check_dependencies
    start_pueue
    create_worker_session "$workers"
    setup_auto_approval
    
    if [ "$demo" = "demo" ]; then
        create_demo
    fi
    
    echo
    echo -e "${GREEN}=== Hybrid Architecture Setup Complete! ===${NC}"
    echo
    
    # Verify setup
    echo "Verifying setup..."
    if tmux has-session -t "$SESSION" 2>/dev/null; then
        echo -e "${GREEN}✓ Tmux session '$SESSION' is active${NC}"
    fi
    
    if pueue status --group "$PUEUE_GROUP" &>/dev/null; then
        echo -e "${GREEN}✓ Pueue group '$PUEUE_GROUP' is ready${NC}"
    fi
    
    echo
    show_usage
    
    echo
    echo -e "${BLUE}Attach to session with:${NC} tmux attach -t $SESSION"
}

# Handle command line args
case "${1:-help}" in
    [0-9]*)
        # Number of workers specified
        main "$1" "$2"
        ;;
    
    demo)
        # Setup with demo data
        main 4 demo
        ;;
    
    "")
        # Default setup
        main
        ;;
    
    *)
        # Unknown command already handled above
        echo -e "${RED}Unknown command: $1${NC}"
        echo "Use: setup-hybrid --help"
        exit 1
        ;;
esac