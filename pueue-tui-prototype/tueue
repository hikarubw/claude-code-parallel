#!/bin/bash
# Tueue - Tmux visualization for Pueue
# Prototype implementation

set -e

# Configuration
TUEUE_VERSION="0.1.0-prototype"
DEFAULT_SESSION="tueue-workers"
DEFAULT_GROUP="default"
CONFIG_DIR="$HOME/.config/tueue"
AUTO_RESPONSE_FILE="$CONFIG_DIR/auto-responses.json"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# Show help
show_help() {
    cat << EOF
$(echo -e "${BLUE}Tueue v$TUEUE_VERSION${NC} - Tmux visualization for Pueue")

USAGE:
    tueue <COMMAND> [OPTIONS]

COMMANDS:
    start       Start visual workers for a Pueue group
    stop        Stop visual workers
    monitor     Open monitoring dashboard
    attach      Attach to a specific worker
    status      Show worker and queue status
    config      Configure auto-responses

OPTIONS:
    -g, --group <GROUP>      Pueue group to visualize (default: $DEFAULT_GROUP)
    -w, --workers <COUNT>    Number of workers (default: 4)
    -l, --layout <LAYOUT>    Tmux layout: grid, tiled, even (default: grid)
    -s, --session <NAME>     Tmux session name (default: $DEFAULT_SESSION)

EXAMPLES:
    # Start 6 workers for the 'build' group
    tueue start --group build --workers 6
    
    # Monitor all workers
    tueue monitor
    
    # Attach to worker 3
    tueue attach 3
    
    # Configure auto-responses
    tueue config auto-response

ABOUT:
    Tueue provides real-time visibility for Pueue tasks by running them
    in tmux panes. Perfect for builds, tests, and AI agents!
    
    GitHub: https://github.com/anthropics/tueue
EOF
}

# Start visual workers
start_workers() {
    local group="${1:-$DEFAULT_GROUP}"
    local workers="${2:-4}"
    local layout="${3:-grid}"
    local session="${4:-$DEFAULT_SESSION}"
    
    echo -e "${BLUE}Starting Tueue workers...${NC}"
    echo "Group: $group"
    echo "Workers: $workers"
    echo "Layout: $layout"
    echo "Session: $session"
    
    # Check if Pueue daemon is running
    if ! pueue status &>/dev/null; then
        echo -e "${RED}Error: Pueue daemon not running${NC}"
        echo "Start it with: pueued -d"
        exit 1
    fi
    
    # Check if group exists
    if ! pueue group | grep -q "^$group"; then
        echo -e "${YELLOW}Creating Pueue group: $group${NC}"
        pueue group add "$group"
        pueue parallel "$workers" --group "$group"
    fi
    
    # Kill existing session if exists
    tmux kill-session -t "$session" 2>/dev/null || true
    
    # Create new session
    tmux new-session -d -s "$session"
    tmux set -t "$session" mouse on
    
    # Create monitor pane (pane 0)
    tmux send-keys -t "$session:0.0" "tueue monitor --internal" C-m
    
    # Create worker panes
    for i in $(seq 1 $workers); do
        tmux split-window -t "$session" -h
        
        # Worker script
        cat << 'WORKER_SCRIPT' > "$CONFIG_DIR/worker-$i.sh"
#!/bin/bash
WORKER_ID=$1
GROUP=$2
SESSION=$3

echo -e "\033[0;32mTueue Worker $WORKER_ID starting...\033[0m"
echo "Polling group: $GROUP"

while true; do
    # Get next task from Pueue
    TASK=$(pueue status --json 2>/dev/null | jq -r --arg group "$GROUP" '
        .tasks | to_entries[] |
        select(.value.status == "Queued" and .value.group == $group) |
        .value | @json
    ' | head -1)
    
    if [[ -z "$TASK" || "$TASK" == "null" ]]; then
        echo -ne "\r[$(date +%H:%M:%S)] Waiting for tasks..."
        sleep 2
        continue
    fi
    
    # Parse task details
    TASK_ID=$(echo "$TASK" | jq -r '.id')
    COMMAND=$(echo "$TASK" | jq -r '.command')
    LABEL=$(echo "$TASK" | jq -r '.label // ""')
    
    echo -e "\n\033[1;33m[$(date +%H:%M:%S)] Starting task $TASK_ID: $LABEL\033[0m"
    
    # Start task in Pueue
    pueue start $TASK_ID
    
    # Execute command visibly in this pane
    echo -e "\033[0;34m$ $COMMAND\033[0m"
    eval "$COMMAND"
    EXIT_CODE=$?
    
    # Mark task complete/failed
    if [ $EXIT_CODE -eq 0 ]; then
        pueue success $TASK_ID
        echo -e "\033[0;32m✓ Task $TASK_ID completed successfully\033[0m"
    else
        pueue kill $TASK_ID
        echo -e "\033[0;31m✗ Task $TASK_ID failed with exit code $EXIT_CODE\033[0m"
    fi
done
WORKER_SCRIPT
        
        chmod +x "$CONFIG_DIR/worker-$i.sh"
        tmux send-keys -t "$session:0.$i" "$CONFIG_DIR/worker-$i.sh $i $group $session" C-m
        
        # Apply layout periodically
        if [ $((i % 2)) -eq 0 ]; then
            case "$layout" in
                grid|tiled)
                    tmux select-layout -t "$session" tiled
                    ;;
                even)
                    tmux select-layout -t "$session" even-horizontal
                    ;;
            esac
        fi
    done
    
    # Final layout adjustment
    tmux select-layout -t "$session" "$layout"
    tmux select-pane -t "$session:0.0"
    
    # Start auto-response daemon if configured
    if [ -f "$AUTO_RESPONSE_FILE" ]; then
        start_auto_response "$session" &
        echo -e "${GREEN}✓ Auto-response daemon started${NC}"
    fi
    
    echo -e "${GREEN}✓ Tueue workers started!${NC}"
    echo -e "Attach with: ${YELLOW}tmux attach -t $session${NC}"
}

# Monitor dashboard
show_monitor() {
    local internal="${1:-}"
    
    if [ "$internal" != "--internal" ]; then
        # External call - open in new window
        tmux new-window -n "tueue-monitor" "tueue monitor --internal"
        return
    fi
    
    # Internal dashboard loop
    while true; do
        clear
        echo -e "${BLUE}═══ Tueue Monitor ═══${NC}"
        echo -e "Time: $(date +%H:%M:%S)"
        echo
        
        # Queue status
        echo -e "${YELLOW}Queue Status:${NC}"
        pueue status | head -20
        
        echo
        echo -e "${YELLOW}Worker Activity:${NC}"
        if tmux list-panes -t "$DEFAULT_SESSION" &>/dev/null; then
            tmux list-panes -t "$DEFAULT_SESSION" -F "Worker #{pane_index}: #{pane_current_command}" | grep -v monitor
        else
            echo "No active workers"
        fi
        
        echo
        echo -e "${YELLOW}System Stats:${NC}"
        echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
        echo "Memory: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
        
        echo
        echo -e "Press Ctrl+C to exit"
        
        sleep 1
    done
}

# Attach to worker
attach_worker() {
    local worker_id="$1"
    local session="${2:-$DEFAULT_SESSION}"
    
    if ! tmux has-session -t "$session" 2>/dev/null; then
        echo -e "${RED}Error: No active Tueue session${NC}"
        echo "Start workers first with: tueue start"
        exit 1
    fi
    
    echo -e "${BLUE}Attaching to worker $worker_id...${NC}"
    tmux select-pane -t "$session:0.$worker_id"
    tmux attach -t "$session"
}

# Stop workers
stop_workers() {
    local session="${1:-$DEFAULT_SESSION}"
    
    echo -e "${YELLOW}Stopping Tueue workers...${NC}"
    
    if tmux has-session -t "$session" 2>/dev/null; then
        tmux kill-session -t "$session"
        echo -e "${GREEN}✓ Workers stopped${NC}"
    else
        echo "No active workers found"
    fi
    
    # Clean up worker scripts
    rm -f "$CONFIG_DIR"/worker-*.sh
}

# Configure auto-responses
configure_auto_response() {
    echo -e "${BLUE}Configuring auto-responses...${NC}"
    echo "Add patterns that Tueue should automatically respond to."
    echo
    
    cat > "$AUTO_RESPONSE_FILE" << 'EOF'
{
  "responses": [
    {
      "pattern": "Do you want to proceed\\? \\[y/N\\]",
      "response": "y"
    },
    {
      "pattern": "Overwrite .+\\? \\(y/n\\)",
      "response": "y"
    },
    {
      "pattern": "Continue\\?",
      "response": "yes"
    }
  ]
}
EOF
    
    echo -e "${GREEN}✓ Auto-response configuration saved${NC}"
    echo "Edit $AUTO_RESPONSE_FILE to customize"
}

# Auto-response daemon
start_auto_response() {
    local session="$1"
    
    while true; do
        if [ -f "$AUTO_RESPONSE_FILE" ]; then
            # Read patterns
            patterns=$(jq -r '.responses[] | @json' "$AUTO_RESPONSE_FILE" 2>/dev/null || echo "[]")
            
            # Check each pane
            for pane in $(tmux list-panes -t "$session" -F "#{pane_index}" 2>/dev/null | grep -v "^0$"); do
                content=$(tmux capture-pane -t "$session:0.$pane" -p 2>/dev/null || continue)
                
                # Check each pattern
                echo "$patterns" | while read -r pattern_json; do
                    pattern=$(echo "$pattern_json" | jq -r '.pattern')
                    response=$(echo "$pattern_json" | jq -r '.response')
                    
                    if echo "$content" | grep -qE "$pattern"; then
                        tmux send-keys -t "$session:0.$pane" "$response" C-m
                    fi
                done
            done
        fi
        
        sleep 0.5
    done
}

# Show status
show_status() {
    echo -e "${BLUE}Tueue Status${NC}"
    echo
    
    # Check if session exists
    if tmux has-session -t "$DEFAULT_SESSION" 2>/dev/null; then
        echo -e "${GREEN}✓ Workers active${NC}"
        tmux list-panes -t "$DEFAULT_SESSION" -F "  Worker #{pane_index}: #{pane_current_command}" | grep -v monitor
    else
        echo -e "${YELLOW}○ No active workers${NC}"
    fi
    
    echo
    echo -e "${BLUE}Pueue Status:${NC}"
    pueue status | head -10
}

# Main command handling
case "${1:-help}" in
    start)
        shift
        # Parse arguments
        group="$DEFAULT_GROUP"
        workers=4
        layout="tiled"
        session="$DEFAULT_SESSION"
        
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -g|--group) group="$2"; shift 2;;
                -w|--workers) workers="$2"; shift 2;;
                -l|--layout) layout="$2"; shift 2;;
                -s|--session) session="$2"; shift 2;;
                *) shift;;
            esac
        done
        
        start_workers "$group" "$workers" "$layout" "$session"
        ;;
    
    stop)
        stop_workers "${2:-$DEFAULT_SESSION}"
        ;;
    
    monitor)
        show_monitor "$2"
        ;;
    
    attach)
        attach_worker "${2:-1}" "${3:-$DEFAULT_SESSION}"
        ;;
    
    status)
        show_status
        ;;
    
    config)
        case "$2" in
            auto-response)
                configure_auto_response
                ;;
            *)
                echo "Usage: tueue config auto-response"
                ;;
        esac
        ;;
    
    version)
        echo "Tueue $TUEUE_VERSION"
        echo "Tmux visualization for Pueue"
        ;;
    
    help|--help|-h|*)
        show_help
        ;;
esac