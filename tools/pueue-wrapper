#!/bin/bash
# Pueue wrapper - Single interface for all Pueue operations
# This replaces file-based queue with pure Pueue backend

set -e

PUEUE_GROUP="subissues"
DEFAULT_PRIORITY=2

# Ensure Pueue daemon is running
ensure_pueue_daemon() {
    if ! pueue status &>/dev/null; then
        echo "Starting Pueue daemon..."
        pueued -d
        sleep 1
    fi
}

# Ensure Pueue group exists
ensure_pueue_group() {
    if ! pueue group | grep -q "^$PUEUE_GROUP"; then
        pueue group add "$PUEUE_GROUP" 2>/dev/null || true
        pueue parallel 8 --group "$PUEUE_GROUP"  # Allow 8 parallel workers
        echo "Created Pueue group: $PUEUE_GROUP"
    fi
}

# Initialize Pueue
init() {
    ensure_pueue_daemon
    ensure_pueue_group
    echo "‚úÖ Pueue initialized with group '$PUEUE_GROUP'"
}

# Add a subissue to Pueue queue
# Usage: pueue-wrapper add PRIORITY PARENT_ISSUE SUBISSUE_ID
add() {
    local priority="${1:-$DEFAULT_PRIORITY}"
    local parent_issue="$2"
    local subissue_id="$3"
    
    if [ -z "$parent_issue" ] || [ -z "$subissue_id" ]; then
        echo "Usage: pueue-wrapper add PRIORITY PARENT_ISSUE SUBISSUE_ID"
        return 1
    fi
    
    ensure_pueue_daemon
    ensure_pueue_group
    
    # Create metadata JSON
    local metadata=$(jq -n \
        --arg parent "$parent_issue" \
        --arg subissue "$subissue_id" \
        --arg created "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
        '{parent: $parent, subissue: $subissue, created: $created}')
    
    # Add to Pueue with inverted priority (Pueue uses higher numbers for higher priority)
    local pueue_priority=$((10 - priority))
    
    # Get the directory of this script
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    # Add task to Pueue
    local task_id=$(pueue add \
        --label "subissue-$subissue_id" \
        --group "$PUEUE_GROUP" \
        --priority "$pueue_priority" \
        --print-task-id \
        "echo '$metadata' > /tmp/pueue-task-$$-metadata.json && $script_dir/process_subissue $subissue_id $parent_issue")
    
    echo "‚úÖ Added subissue #$subissue_id to queue (priority: $priority, Pueue ID: $task_id)"
}

# Get next pending task
# Usage: pueue-wrapper next [WORKER_ID]
next() {
    local worker_id="${1:-}"
    
    # Get next queued task
    local next_task=$(pueue status --json | jq -r --arg group "$PUEUE_GROUP" '
        .tasks | to_entries[] |
        select(.value.status == "Queued" and 
               (.value.group // "default") == $group and
               (.value.label | startswith("subissue-"))) |
        .value | "\(.id)|\(.label)"
    ' | head -1)
    
    if [ -z "$next_task" ]; then
        return 1
    fi
    
    local task_id=$(echo "$next_task" | cut -d'|' -f1)
    local label=$(echo "$next_task" | cut -d'|' -f2)
    local subissue_id=$(echo "$label" | cut -d- -f2)
    
    # Start the task (marks it as running)
    pueue start "$task_id"
    
    # Return task info
    echo "$task_id|$subissue_id"
}

# Update task status
# Usage: pueue-wrapper update SUBISSUE_ID STATUS
update() {
    local subissue_id="$1"
    local status="$2"
    
    if [ -z "$subissue_id" ] || [ -z "$status" ]; then
        echo "Usage: pueue-wrapper update SUBISSUE_ID STATUS"
        return 1
    fi
    
    # Find task by label
    local task_info=$(pueue status --json | jq -r --arg label "subissue-$subissue_id" '
        .tasks | to_entries[] |
        select(.value.label == $label) |
        "\(.key)|\(.value.status)"
    ' | head -1)
    
    if [ -z "$task_info" ]; then
        echo "‚ùå Subissue #$subissue_id not found in queue"
        return 1
    fi
    
    local task_id=$(echo "$task_info" | cut -d'|' -f1)
    
    case "$status" in
        completed)
            pueue success "$task_id" 2>/dev/null || true
            echo "‚úÖ Marked subissue #$subissue_id as completed"
            ;;
        failed)
            pueue kill "$task_id" 2>/dev/null || true
            echo "‚ùå Marked subissue #$subissue_id as failed"
            ;;
        working)
            # Task is already running if we're updating to working
            echo "üîÑ Subissue #$subissue_id is working"
            ;;
        pending)
            # Reset task to queued state
            pueue restart "$task_id" 2>/dev/null || true
            echo "‚Ü©Ô∏è Reset subissue #$subissue_id to pending"
            ;;
    esac
}

# Get task details
# Usage: pueue-wrapper get SUBISSUE_ID
get() {
    local subissue_id="$1"
    
    if [ -z "$subissue_id" ]; then
        echo "Usage: pueue-wrapper get SUBISSUE_ID"
        return 1
    fi
    
    # Find task by label and get its details
    pueue status --json | jq -r --arg label "subissue-$subissue_id" '
        .tasks | to_entries[] |
        select(.value.label == $label) |
        .value | 
        {
            id: .id,
            label: .label,
            status: .status,
            priority: (10 - .priority),
            created: .enqueued,
            command: .command
        } | @json
    ' | head -1
}

# Show queue status
status() {
    echo "üìä Pueue Queue Status"
    echo "===================="
    
    # Get counts by status
    local counts=$(pueue status --json | jq -r --arg group "$PUEUE_GROUP" '
        .tasks | to_entries | 
        map(select(.value.group == $group and (.value.label | startswith("subissue-")))) |
        group_by(.value.status | keys[0]) |
        map({status: (.[0].value.status | keys[0]), count: length}) |
        .[] | "\(.status): \(.count)"
    ')
    
    if [ -n "$counts" ]; then
        echo "$counts"
    else
        echo "No tasks in queue"
    fi
    
    echo ""
    
    # Show active tasks
    echo "Active Tasks:"
    echo "Priority | Subissue | Status    | Created"
    echo "---------|----------|-----------|--------"
    
    pueue status --json | jq -r --arg group "$PUEUE_GROUP" '
        .tasks | to_entries |
        map(select(.value.group == $group and (.value.label | startswith("subissue-")))) |
        sort_by(.value.priority) |
        .[] |
        .value |
        "\(10 - .priority) | #\(.label | split("-")[1]) | \(.status | keys[0]) | \(.enqueued // "N/A")"
    '
}

# Show tasks by parent issue
by_parent() {
    local parent_issue="$1"
    
    if [ -z "$parent_issue" ]; then
        echo "Usage: pueue-wrapper by-parent PARENT_ISSUE"
        return 1
    fi
    
    echo "üìã Subissues for parent #$parent_issue"
    echo "================================"
    
    # For now, parse from command since we embed parent in the command
    # In production, we'd store this in a separate metadata system
    pueue status --json | jq -r --arg parent "$parent_issue" '
        .tasks | to_entries |
        map(select(.value.command | contains("process_subissue") and contains($parent))) |
        .[] |
        .value |
        "#\(.label | split("-")[1]) - \(.status)"
    '
}

# Retry failed tasks
retry() {
    local subissue_id="$1"
    
    if [ "$subissue_id" = "all" ]; then
        echo "üîÑ Retrying all failed tasks..."
        
        # Get all failed tasks and restart them
        pueue status --json | jq -r --arg group "$PUEUE_GROUP" '
            .tasks | to_entries |
            map(select(.value.group == $group and 
                      .value.status == "Failed" and 
                      (.value.label | startswith("subissue-")))) |
            .[] | .key
        ' | while read task_id; do
            pueue restart "$task_id"
            echo "‚Ü©Ô∏è Restarted task $task_id"
        done
        
        echo "‚úÖ All failed tasks restarted"
    elif [ -n "$subissue_id" ]; then
        # Find and restart specific task
        local task_id=$(pueue status --json | jq -r --arg label "subissue-$subissue_id" '
            .tasks | to_entries[] |
            select(.value.label == $label and .value.status == "Failed") |
            .key
        ' | head -1)
        
        if [ -n "$task_id" ]; then
            pueue restart "$task_id"
            echo "‚úÖ Restarted subissue #$subissue_id (task $task_id)"
        else
            echo "‚ùå No failed task found for subissue #$subissue_id"
        fi
    else
        echo "Usage: pueue-wrapper retry SUBISSUE_ID|all"
        return 1
    fi
}

# Clean completed tasks
clean() {
    local days="${1:-7}"
    
    echo "üßπ Cleaning completed tasks older than $days days..."
    
    # Pueue has built-in clean command
    pueue clean --group "$PUEUE_GROUP"
    
    echo "‚úÖ Cleaned old completed tasks"
}

# Monitor queue in real-time
monitor() {
    echo "Launching Pueue monitor for group '$PUEUE_GROUP'..."
    pueue status --group "$PUEUE_GROUP" --watch
}

# Export queue data (for migration or backup)
export_queue() {
    echo "üì§ Exporting queue data..."
    
    pueue status --json | jq --arg group "$PUEUE_GROUP" '
        .tasks | to_entries |
        map(select(.value.group == $group and (.value.label | startswith("subissue-")))) |
        map({
            subissue_id: (.value.label | split("-")[1]),
            status: .value.status,
            priority: (10 - .value.priority),
            created: .value.enqueued,
            started: .value.start,
            ended: .value.end,
            command: .value.command
        })
    '
}

# Main command handling
case "${1:-help}" in
    init)
        init
        ;;
    
    add)
        shift
        add "$@"
        ;;
    
    next)
        shift
        next "$@"
        ;;
    
    update)
        shift
        update "$@"
        ;;
    
    get)
        shift
        get "$@"
        ;;
    
    status)
        status
        ;;
    
    by-parent)
        shift
        by_parent "$@"
        ;;
    
    retry)
        shift
        retry "$@"
        ;;
    
    clean)
        shift
        clean "$@"
        ;;
    
    monitor)
        monitor
        ;;
    
    export)
        export_queue
        ;;
    
    *)
        echo "Usage: pueue-wrapper <command> [args]"
        echo ""
        echo "Commands:"
        echo "  init                          - Initialize Pueue with subissues group"
        echo "  add PRIORITY PARENT SUBISSUE  - Add subissue to queue"
        echo "  next [WORKER_ID]              - Get next task from queue"
        echo "  update SUBISSUE STATUS        - Update task status"
        echo "  get SUBISSUE                  - Get task details"
        echo "  status                        - Show queue status"
        echo "  by-parent PARENT              - Show tasks for parent issue"
        echo "  retry SUBISSUE|all            - Retry failed tasks"
        echo "  clean [DAYS]                  - Clean old completed tasks"
        echo "  monitor                       - Live queue monitor"
        echo "  export                        - Export queue data as JSON"
        echo ""
        echo "This wrapper provides a pure Pueue backend, eliminating file-based queue"
        ;;
esac